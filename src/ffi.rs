//! Imports and exports to the Gotime runtime.

use std::{ffi::c_void, sync::Arc, task::Context};

use crate::TaskFuture;

/// Generated automatically by `bindgen` from the header generated by the Go compiler.
pub mod generated {
    #![allow(non_upper_case_globals)]
    #![allow(non_camel_case_types)]
    #![allow(non_snake_case)]

    include!(concat!(env!("OUT_DIR"), "/runtime.rs"));
}

#[export_name = "gotime_process_task"]
pub unsafe extern "C" fn process_task(task: *mut c_void) {
    assert!(!task.is_null(), "Got null pointer in task queue!");
    let task: Arc<generated::Task> = Arc::from_raw(task.cast_const().cast());
    {
        assert!(!task.future.is_null(), "Got null pointer in future!");
        let task_future: TaskFuture = Box::from_raw(task.future.cast());
        let mut future = task_future.lock().unwrap();
        let waker = crate::waker::wrap_arc_fut(&task);
        let mut context = Context::from_waker(&waker);
        if future.as_mut().poll(&mut context).is_pending() {
            drop(future);
            let _ = Arc::into_raw(task);
            let _ = Box::leak(task_future);
        }
    }
}
